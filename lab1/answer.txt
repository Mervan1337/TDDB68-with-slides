0a) A system call is a way for programs to interact with the operating system. A computer program makes a system call when it
 makes a request to the operating system's kernel.

0b) Because system calls are typically implemented as part of the operating system kernel. Which is a part of the cpu that we don't want users to reach because
when you reach the kernel you get direct access to system resources. 
Allowing user processes  to access kernel's code as a library would weaken the security between user space and kernel

1a) Like in lab0 the sys_call handler has a parameter which uses the struct intr_frame. 
We can use f->esp to find the start of the stack which contains which sys_call it uses, you can then find which "int" the sys_call correspends to.

1b) They are stored on a stack to reach it you use f->esp which is the pointer to the stacks begining.

2a) The users stack grows downwards from PHYS_BASE. The whole users memory will be located from virtual address 0 up to PHYS_BASE.
The kernel stack starts from PHYS_BASE to the end of virtual memory. The stack starts at PHYS_BASE/the end of the virtual memory (!!!!! Dubbelkolla detta !!!!!!!)

2b) You can reach the user programs stackpointer with f->esp. Then you can reach everything else (!!!! Dubbelkolla detta !!!!!!)

2c) The reason is because of security. If we had a shared stack the user programs could reach the kernel components which could harm the system.

3a) The stack it should be in will be userprogram (the user stack) based on lab0  b) with f->esp
3c) If you send in a null-ptr, a ptr to unmapped virtual memory or a pointer to kernel virtual address space.
3d) There are two ways to do it, the first method is to verify if the ptr is a valid ptr then dereference it or you could check if the ptr points to below PHYS_BASE.
if it is invalid it will cause a page_fault. This method is faster but harder to implement.

4) The filesystem is a part of the kernel and we don't want the user to reach kernel files. 
The reason is because the user can inject malicious code that can crash the OS. 
That is why we have system calls, which has protection against malicious code.

5) A inode is a unique identifier and the filesystem uses for keeping track of which file it is 
and who has permission to use it. It uses the same principle as Windows NTFS file reference.  
